(function(){"use strict";angular.module("ngApp",["ngResource","ngRoute"])})();(function(){"use strict";angular.module("ngApp").config(["$routeProvider","$locationProvider",function($routeProvider,$locationProvider){$routeProvider.when("/login",{templateUrl:"/partials/admin/login"}).when("/:league/:season/:team/roster",{templateUrl:"/partials/team/index"}).when("/",{templateUrl:"/partials/home/index"}).otherwise({redirectTo:"/"});$locationProvider.html5Mode(true)}])})();(function(){"use strict";var defaultTimeout=1e4;angular.module("ngApp").factory("RosterService",["$resource",function($resource){return $resource("/api/espnffl/:league/:season/:team/roster",{},{Get:{method:"GET",timeout:defaultTimeout,isArray:false}})}]).factory("EspnFflService",["$resource",function($resource){return $resource("/api/espnffl/:league/:season/:noun",{},{Get:{method:"GET",timeout:defaultTimeout,isArray:false}})}])})();(function(){"use strict";angular.module("ngApp").controller("Master_Controller",["$routeParams","$rootScope","$location",function($routeParams,$rootScope,$location){var vm=this;$rootScope.$on("settingsLoaded",function(event,data){vm.settings=data;vm.settings.leagueName=_(data.settings.basic).findWhere({key:"LeagueName"}).value});$rootScope.$on("membersLoaded",function(event,data){vm.members=data});$rootScope.$on("teamLoaded",function(event,data){vm.team=data});vm.onMemberSelected=function(member){vm.team=member.team;$location.path("/"+[$routeParams.league,$routeParams.season,member.team.id,"roster"].join("/"))}}]).controller("Roster_Controller",["$location","$routeParams","$rootScope","$scope","EspnFflService","RosterService",function($location,$routeParams,$rootScope,$scope,EspnFflService,RosterService){var vm=this;vm.errors=[];vm.isWorking=true;$scope.$watch("errors",function(){if(vm.errors&&vm.errors.length){vm.isWorking=false}});async.parallel({getOwnerRoster:function(callback){RosterService.Get({league:$routeParams.league,season:$routeParams.season,team:$routeParams.team},function(data){return callback(null,data)},function(err){return callback({reason:"Could not retrieve roster information at this time. Please try back later."})})},getLeagueSettings:function(callback){EspnFflService.Get({league:$routeParams.league,season:$routeParams.season,noun:"settings"},function(data){return callback(null,data)},function(err){return callback({reason:"Could not retrieve league settings information at this time. Please try back later."})})},getLeagueMembers:function(callback){if($scope.masterCtrl.members){return callback(null,$scope.masterCtrl.members)}EspnFflService.Get({league:$routeParams.league,season:$routeParams.season,noun:"members"},function(data){return callback(null,data)},function(err){return callback({reason:"Could not retrieve league member information at this time. Please try back later."})})}},function(err,results){if(err){vm.errors.push(err);return}vm.data=results.getOwnerRoster;vm.settings=results.getLeagueSettings;vm.members=results.getLeagueMembers.members;$rootScope.$broadcast("teamLoaded",results.getOwnerRoster.team);$rootScope.$broadcast("settingsLoaded",results.getLeagueSettings);if(!$scope.masterCtrl.members){$rootScope.$broadcast("membersLoaded",results.getLeagueMembers.members)}vm.populateEmptyRosterSlots(vm.data.roster.starters,vm.settings);vm.isWorking=false});vm.populateEmptyRosterSlots=function(actualStarters,leagueSettings){var starterSlots=_(leagueSettings.settings.roster).filter(function(rs){return["QB","RB","RB/WR","TE","LB","DL","DB","K","P","D/ST"].indexOf(rs.key.toUpperCase())>-1});var starterSlotsFilled=_(actualStarters).countBy(function(str){return str.fantasyPosition});var vacancies=_(starterSlots).map(function(ss){var slim=_(ss).pick(["key","name","maximumStarters"]);slim.openings=ss.maximumStarters-(starterSlotsFilled[ss.key]||0);return slim});_(vacancies).each(function(v){for(var i=0;i<v.openings;i++){actualStarters.push({fantasyPosition:v.key})}})}}])})();(function(){"use strict";angular.module("ngApp").filter("isQB",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="QB".toUpperCase()})}}]).filter("isRB",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="RB".toUpperCase()})}}]).filter("isFlex",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="RB/WR".toUpperCase()})}}]).filter("isWR",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="WR".toUpperCase()})}}]).filter("isTE",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="TE".toUpperCase()})}}]).filter("isLB",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="LB".toUpperCase()})}}]).filter("isDL",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="DL".toUpperCase()})}}]).filter("isDB",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="DB".toUpperCase()})}}]).filter("isK",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="K".toUpperCase()})}}]).filter("isP",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="P".toUpperCase()})}}]).filter("isDST",[function(){return function(players){return _(players).filter(function(player){return player&&player.fantasyPosition&&player.fantasyPosition.toUpperCase()==="D/ST".toUpperCase()})}}])})();$(function(){});function getAverageColourAsRGB(img){var canvas=document.createElement("canvas"),context=canvas.getContext&&canvas.getContext("2d"),rgb={r:102,g:102,b:102},pixelInterval=5,count=0,i=-4,data,length;if(!context){return rgb}var height=canvas.height=img.naturalHeight||img.offsetHeight||img.height,width=canvas.width=img.naturalWidth||img.offsetWidth||img.width;context.drawImage(img,0,0);try{data=context.getImageData(0,0,width,height)}catch(e){alert(e);return rgb}data=data.data;length=data.length;while((i+=pixelInterval*4)<length){count++;rgb.r+=data[i];rgb.g+=data[i+1];rgb.b+=data[i+2]}rgb.r=Math.floor(rgb.r/count);rgb.g=Math.floor(rgb.g/count);rgb.b=Math.floor(rgb.b/count);return rgb}